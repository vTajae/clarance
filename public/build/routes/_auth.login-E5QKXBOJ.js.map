{
  "version": 3,
  "sources": ["../../../app/routes/_auth.login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.login.tsx\");\n  import.meta.hot.lastModified = \"1708903629465.7825\";\n}\n// REMIX HMR END\n\nimport React, { useState } from \"react\";\nimport { useActionData } from \"@remix-run/react\";\nimport { json, redirect } from \"@remix-run/cloudflare\";\n\n// import { UserCloudService } from \"../../api/services/CloudFlare/user_service\";\n// import { Credentials } from \"~/props/credentials\";\n// import { LoginCookieData } from \"api/schemas/user/cookie\";\n\nimport { isAuthenticated } from \"~/utils/session/sessionUtils\";\nimport UserService from \"api_v2/services/userService\";\n\n// Define a type that matches the expected structure of your nested context\n\nexport const loader = async ({\n  request,\n  context\n}) => {\n  if (await isAuthenticated(request, context)) {\n    // User is already logged in, redirect them to the dashboard or home page\n    return redirect(\"/home\");\n  }\n  return json({});\n};\nexport const action = async ({\n  request,\n  context\n}) => {\n  let mySession = context.session;\n  let myEnv = context.env;\n  console.log(context, \"context.env\");\n\n  // Now you can access your env with the correct type\n\n  const userService = new UserService(myEnv);\n  const formData = await request.formData();\n  const actionType = formData.get(\"actionType\");\n  // const userService = new UserService(env);\n\n  if (actionType === \"login\") {\n    const userData = {\n      username: formData.get(\"username\"),\n      password: formData.get(\"password\"),\n      role: formData.get(\"role\")\n    };\n    const loginResult = await userService.loginUser(userData);\n    if (loginResult.success && loginResult.user) {\n      console.log(\"loginResult\", loginResult);\n      // Create a new session and set login data\n      mySession.set(\"auth\", {\n        ...loginResult.user\n      });\n\n      // Respond with a redirect and set the session cookie\n      return new Response(null, {\n        status: 303,\n        // or 302, depending on your use case\n        headers: {\n          Location: \"/home\"\n        }\n      });\n    } else {\n      // Handle login failure (e.g., return an error message)\n      mySession.flash(\"error\", \"Invalid username or password.\");\n      return new Response(null, {\n        status: 303,\n        headers: {\n          Location: \"/login\"\n        }\n      });\n    }\n  } else if (actionType === \"register\") {\n    // Handle registration similarly, potentially creating a session on successful registration\n  }\n\n  // Fallback for invalid action type\n  return json({\n    error: \"Invalid action type.\"\n  });\n};\nconst LoginOrRegister = () => {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"\"); // Add role state if needed for registration\n  const [actionType, setActionType] = useState(\"login\"); // Toggle between login and register\n  const actionData = useActionData();\n  return <form action=\"/login\" method=\"post\" className=\"max-w-lg mx-auto mt-2 p-8 bg-gradient-to-r from-gray-800 to-gray-900 rounded-lg shadow-2xl\">\n      {/* Toggle Form Action */}\n      <input type=\"hidden\" name=\"actionType\" value={actionType} />\n\n      <div className=\"mb-6\">\n        <label htmlFor=\"username\" className=\"block text-gray-300 text-base font-semibold mb-2\">\n          Username\n        </label>\n        <input type=\"text\" name=\"username\" id=\"username\" value={username} onChange={e => setUsername(e.target.value)} className=\"shadow appearance-none border-2 border-gray-700 rounded-lg w-full py-3 px-4 text-white bg-gray-800 leading-tight focus:outline-none focus:border-blue-500\" placeholder=\"Enter your username\" />\n      </div>\n\n      <div className=\"mb-6\">\n        <label htmlFor=\"password\" className=\"block text-gray-300 text-base font-semibold mb-2\">\n          Password\n        </label>\n        <input type=\"password\" name=\"password\" id=\"password\" value={password} onChange={e => setPassword(e.target.value)} className=\"shadow appearance-none border-2 border-gray-700 rounded-lg w-full py-3 px-4 text-white bg-gray-800 mb-3 leading-tight focus:outline-none focus:border-blue-500\" placeholder=\"Enter your password\" />\n      </div>\n\n      {actionType === \"register\" &&\n    // Add additional fields for registration as needed\n    <div className=\"mb-6\">\n          <label htmlFor=\"role\" className=\"block text-gray-300 text-base font-semibold mb-2\">\n            Role\n          </label>\n          <select name=\"role\" id=\"role\" value={role} onChange={e => setRole(e.target.value)} className=\"shadow border-2 border-gray-700 rounded-lg w-full py-3 px-4 bg-gray-800 text-white leading-tight focus:outline-none focus:border-blue-500\">\n            <option value=\"\">Select a role</option>\n            <option value=\"2\">User</option>\n            <option value=\"1\">Admin</option>\n          </select>\n        </div>}\n\n      {actionData?.error && <div className=\"text-red-500 text-xs italic\">{actionData.error}</div>}\n\n      <div className=\"flex items-center justify-between space-x-4\">\n        <button className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold py-3 px-8 rounded-lg shadow-lg focus:outline-none focus:ring-2 focus:ring-green-300 focus:ring-opacity-50 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105\" type=\"submit\" onClick={() => setActionType(\"login\")}>\n          Login\n        </button>\n        <button className=\"bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-bold py-3 px-8 rounded-lg shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-opacity-50 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105\" type=\"submit\" onClick={() => setActionType(\"register\")}>\n          Register\n        </button>\n      </div>\n    </form>;\n};\n_s(LoginOrRegister, \"gyjZ4S0R2Q+CLbkNCPqUQE7nFUQ=\", false, function () {\n  return [useActionData];\n});\n_c = LoginOrRegister;\nexport default LoginOrRegister;\nvar _c;\n$RefreshReg$(_c, \"LoginOrRegister\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
