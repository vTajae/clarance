{
  "version": 3,
  "sources": ["../../../app/routes/dashboard.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/routes/dashboard.tsx\"\n);\nimport.meta.hot.lastModified = \"1703922327401.251\";\n}\n// REMIX HMR END\n\nimport { LoaderFunction, json, redirect } from \"@remix-run/cloudflare\";\nimport { useLoaderData, useNavigate } from \"@remix-run/react\";\nimport { useDispatch, useTypedSelector } from \"../state/hooks/user\";\nimport { User } from \"../../api/models/user\";\nimport Navigation from \"~/components/navigation\";\nimport Header from \"~/components/header\";\nimport { useEffect } from \"react\";\nimport { selectIsLoggedIn, setLogout, setUser } from \"~/state/user/userSlice\";\nimport { RootState } from \"~/state/store\";\nimport authenticateAndFetchProfile from \"~/utils/auth/authenticateAndFetchProfile\";\n\n\ntype LoaderData = {\n    user: User | null;\n  };\n  \n// app/root.tsx\n\n// export const loader: LoaderFunction = async ({ request, context }) => {\n//   try {\n//     const user = await authenticateAndFetchProfile(request, context.env);\n//     return json({ user });\n//   } catch (error) {\n//     // Handle errors such as failed authentication\n//     console.error(\"Error in loader:\", error);\n//     return json({ user: null });\n//   }\n// };\n\nexport default function dashboard() {\nconst data = useLoaderData<LoaderData>();\nconst user = useTypedSelector((state: RootState) => state.user.value);\n  const dispatch = useDispatch();\n\n  // console.log(data, \"data\");\n  // console.log(user, \"user\");\n\n  // useEffect(() => {\n  //   // Assuming `data.user` is the user data from the loader\n  //   // and `user` is the user data from the Redux store\n  \n  //   // Check if user data from the loader is different from the Redux store\n  //   const shouldUpdateUser = data.user\n  //     ? !user.user || data.user.id !== user.user.id\n  //     : !user.user;\n  \n  //   // Update the Redux store only if there's a change\n  //   if (shouldUpdateUser) {\n  //     if (data.user) {\n  //       dispatch(setUser(data.user));\n  //     } else {\n  //       dispatch(setLogout());\n  //     }\n  //   }\n  //   // Remove `user` from the dependency array to avoid re-triggering\n  //   // on every user state change\n  // }, [data.user, dispatch]);\n  \n\n  return (\n    <div>\n      <Header>\n        <Navigation />\n      </Header>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAyEQ;AAvER,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAgCe,SAAR,YAA6B;AACpC,QAAM,OAAO,cAA0B;AACvC,QAAM,OAAO,iBAAiB,CAAC,UAAqB,MAAM,KAAK,KAAK;AAClE,QAAM,WAAW,YAAY;AA2B7B,SACE,mDAAC,SACC,6DAAC,kBACC,6DAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,SAAY,KADd;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAEJ;",
  "names": []
}
