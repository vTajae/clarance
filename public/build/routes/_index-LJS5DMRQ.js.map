{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1708461971875.012\";\n}\n// REMIX HMR END\n\nimport { useDispatch, useTypedSelector } from \"~/state/hooks/user\";\nimport Navigation from \"~/components/navigation\";\nimport Header from \"~/components/header\";\nexport const meta = () => {\n  return [{\n    title: \"New Remix App\"\n  }, {\n    name: \"description\",\n    content: \"Welcome to Remix!\"\n  }];\n};\n\n// export const loader: LoaderFunction = async ({ request, context }) => {\n//   try {\n//     const user = await checkAuthentication({request, context});\n//     console.log(user, \"user3\");\n\n//     return json({ user });\n//   } catch (error) {\n//     // Handle errors such as failed authentication\n//     console.error(\"Error in loader:\", error);\n//     return redirect(\"/login\");\n//   }\n// };\n\nexport default function Index() {\n  _s();\n  // const data = useLoaderData<LoaderData>();\n  const user = useTypedSelector(state => state.user.value);\n  const dispatch = useDispatch();\n\n  // console.log(data, \"data2\");\n\n  // useEffect(() => {\n  //   // Assuming `data.user` is the user data from the loader\n  //   // and `user` is the user data from the Redux store\n\n  //   // Check if user data from the loader is different from the Redux store\n  //   const shouldUpdateUser = data.user\n  //     ? !user.user || data.user.id !== user.user.id\n  //     : !user.user;\n\n  //   // Update the Redux store only if there's a change\n  //   if (shouldUpdateUser) {\n  //     if (data.user) {\n  //       dispatch(setUser(data.user));\n  //     } else {\n  //       dispatch(setLogout());\n  //     }\n  //   }\n  //   // Remove `user` from the dependency array to avoid re-triggering\n  //   // on every user state change\n  // }, [data.user, dispatch]);\n\n  return <>\n    <Header>\n      <Navigation />\n    </Header>\n    </>;\n}\n_s(Index, \"vSJk+S806UHaaLDQMF6Cs7/Opgc=\", false, function () {\n  return [useTypedSelector, useDispatch];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AA2ES;AA1ET,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4BAA8B,EAAE;AAAA,EACzE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuB;AACvB,cAAY,IAAI,eAAe;AACjC;AAMO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AAee,SAAR,QAAyB;AAC9B,KAAG;AAEH,QAAM,OAAO,iBAAiB,WAAS,MAAM,KAAK,KAAK;AACvD,QAAM,WAAW,YAAY;AAyB7B,SAAO,sFACL,6DAAC,kBACC,6DAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,SAAY,KADd;AAAA;AAAA;AAAA;AAAA,SAEA,KAHK;AAAA;AAAA;AAAA;AAAA,SAIL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,kBAAkB,WAAW;AACvC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
