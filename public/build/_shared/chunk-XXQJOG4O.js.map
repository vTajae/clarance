{
  "version": 3,
  "sources": ["../../../api/models/api-result.ts", "../../../api/services/secure_service.ts", "../../../app/props/credentials.ts", "../../../api/services/user_service.ts"],
  "sourcesContent": ["export class ApiResult<T> {\n    content: T[];\n    pageable: Pageable;\n    last: boolean;\n    totalElements: number;\n    totalPages: number;\n    size!: number;\n    number!: number;\n    first!: boolean;\n    numberOfElements: number;\n    sort!: Sort;\n\n    constructor(content: T[], totalElements: number, totalPages: number, pageSize: number, pageNumber: number, paged: boolean) {\n        this.content = content;\n        this.pageable = new Pageable(pageSize, pageNumber, paged);\n        this.last = false;\n        this.totalElements = totalElements;\n        this.totalPages = totalPages;\n        this.numberOfElements = content.length;\n    }\n}\n\nexport class Pageable {\n    sort: Sort;\n    offset: number;\n    pageSize: number;\n    pageNumber: number;\n    unpaged: boolean;\n    paged: boolean;\n\n    constructor(pageSize: number, pageNumber: number, paged: boolean) {\n        this.sort = new Sort(false);\n        this.offset = 0;\n        this.pageSize = pageSize;\n        this.pageNumber = pageNumber;\n        this.paged = paged;\n        this.unpaged = !paged;\n    }\n}\n\nexport class Sort {\n    sorted: boolean;\n    unsorted: boolean;\n\n    constructor(sorted: boolean) {\n        this.sorted = sorted;\n        this.unsorted = !sorted;\n    }\n}\n", "import { ApiResult } from \"../models/api-result\";\nimport type { LoginResponse } from \"../models/user\";\nimport type { Credentials } from \"../../app/props/credentials\";\n\nexport class SecureService {\n  private static root = \"http://localhost:8000\";\n  static defaultHeaders: HeadersInit | undefined;\n\n  protected static getRequestOptions(method: string, body?: unknown): RequestInit {\n    let options: RequestInit = {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...this.defaultHeaders,\n      },\n      // Removed 'credentials' field\n    };\n  \n    if (body) options.body = JSON.stringify(body);\n    return options;\n  }\n  \n\n  protected static getRaw<T>(url: string): Promise<T[]> {\n    const options = this.getRequestOptions(\"GET\");\n    return fetch(`${this.root}/${url}`, options)\n      .then((response) => this.handleResponse<T[]>(response))\n      .catch((error) => {\n        console.log(error.message, url, error.stack);\n        return []; // Return an empty array in case of an error\n      });\n  }\n\n  protected static getPaginated<T>(\n    url: string,\n    page: number,\n    filter?: string\n  ): Promise<ApiResult<T>> {\n    url = `${this.root}/${url}?page=${page}${filter ? `&${filter}` : \"\"}`;\n    const options = this.getRequestOptions(\"GET\");\n    return fetch(url, options)\n      .then((response) => this.handleResponse<ApiResult<T>>(response))\n      .catch((error) => {\n        console.log(error.message, url, error.stack);\n        return new ApiResult<T>([], 0, 0, 20, 0, true);\n      });\n  }\n\n  protected static post<T>(url: string, body: unknown): Promise<void | T> {\n    const options = this.getRequestOptions(\"POST\", body);\n    return this.retrieve<T>(`${this.root}/${url}`, options);\n  }\n\n  protected static patch<T>(url: string, body: unknown): Promise<void | T> {\n    const options = this.getRequestOptions(\"PATCH\", body);\n    return this.retrieve<T>(`${this.root}/${url}`, options);\n  }\n\n  protected static authenticate(url: string, credentials: Credentials): Promise<LoginResponse> {\n    const options = this.getRequestOptions(\"POST\", credentials);\n    return fetch(`${this.root}/${url}`, options).then((response) => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return this.handleResponse<LoginResponse>(response);\n    });\n  }\n  \n\n  protected static async getSingle<T>(url: string): Promise<void | T> {\n    const options = this.getRequestOptions(\"GET\");\n    let test = await this.retrieve<T>(`${this.root}/${url}`, options);\n    return test;\n  }\n\n  private static retrieve<T>(url: string, options: RequestInit): Promise<T> {\n    return fetch(url, options)\n      .then((response) => this.handleResponse<T>(response))\n      .catch((error) => {\n        console.log(error.message, url, error.stack);\n        throw error; // Throw the error to be handled by the caller\n      });\n  }\n\n  private static async handleResponse<T>(response: Response): Promise<T> {\n    if (response.status !== 200) {\n      console.log(`Bad response code ${response.status} returned`);\n      throw new Error(`Response returned status ${response.status}`);\n    }\n\n    return await response.json() as Promise<T>;\n  }\n\n  // private static showToast(message: string): void {\n  //   this.toast.show(\n  //     new ToastProps(\"Service call error\", message, ToastType.Warning)\n  //   );\n  // }\n\n  // private static logError(message: string, url: string, stack: string): void {\n  //   console.log(`Service call error \"${message}\"`);\n  //   console.log(`Endpoint is \"${url}\"`);\n  //   console.log(`Stack is \"${stack}\"`);\n  //   console.log(`${message} ${url} `);\n  // }\n}\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/props/credentials.ts\"\n);\nimport.meta.hot.lastModified = \"1703724946237.183\";\n}\n// REMIX HMR END\n\nexport class Credentials {\n    username: string;\n    password: string;\n  \n    constructor(username: string, password: string) {\n      this.username = username;\n      this.password = password;\n    }\n  }", "import { SecureService } from \"./secure_service\";\nimport type { LoginResponse, User } from \"../models/user\";\nimport { Credentials } from \"~/props/credentials\";\n\nexport class UserService extends SecureService {\n\n  static setDefaultHeaders(cookieHeader: string) {\n    this.defaultHeaders = {\n      'Cookie': cookieHeader,\n    };\n  }\n\n  static async registerUser(\n    login: string,\n    password: string\n  ): Promise<void | User> {\n    //return this.authenticate(\"login\",new Credentials(login, password));\n    return this.post<User>(\"register\", new Credentials(login, password));\n  }\n\n  static async getUserProfile(): Promise<void | User> {\n    try {\n      return await this.getSingle<User>(\"user/profile\");\n        // Return the user data directly\n    } catch (error) {\n      return console.error(\"Error fetching user profile:\", error);; // Return null or handle the error gracefully\n    }\n  }\n  \n\n  static async MyRefresh(): Promise<void | string> {\n    try {\n      // Pass an empty object as the body if your post method requires it\n      const response = await this.post<{ message: string }>(\"refresh\", {});\n      if (response) {\n        console.log(response.message); // Log the response message only if response is not void\n        return response.message; // Return the message string\n      }\n    } catch (error) {\n      console.error(\"Error refreshing token:\", error);\n      // Handle the error appropriately\n      throw error;\n    }\n  }\n\n  static async loginUser(\n    login: string,\n    password: string\n  ): Promise<LoginResponse> {\n    return this.authenticate(\"login\", new Credentials(login, password));\n  }\n\n\n  static async getUserByUsername(username: string): Promise<void | User> {\n    return this.getSingle<User>(`users/${username}`);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
