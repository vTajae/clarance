{
  "version": 3,
  "sources": ["../../../app/state/counter/counterSlice.tsx", "../../../app/state/quickbooks/quickbooksSlice.tsx", "../../../app/state/plaid/plaidSlice.tsx", "../../../app/state/store.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/state/counter/counterSlice.tsx\"\n);\nimport.meta.hot.lastModified = \"1703722624787.679\";\n}\n// REMIX HMR END\n\nimport { PayloadAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, () => {\n        console.log(\"incrementAsync.pending\");\n      })\n      .addCase(\n        incrementAsync.fulfilled,\n        (state, action: PayloadAction<number>) => {\n          state.value += action.payload;\n        }\n      );\n  },\n});\n\nexport const incrementAsync = createAsyncThunk(\n  \"counter/incrementAsync\",\n  async (amount: number) => {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    return amount;\n  }\n);\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport default counterSlice.reducer;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/state/quickbooks/quickbooksSlice.tsx\"\n);\nimport.meta.hot.lastModified = \"1703722624795.679\";\n}\n// REMIX HMR END\n\nimport { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { createSelector } from '@reduxjs/toolkit';\n\n\ninterface QuickbooksState {\n  isAuthenticated: boolean;\n  accessToken: string | null;\n  refreshToken: string | null;\n}\n\nconst initialStateValue: QuickbooksState = {\n  isAuthenticated: false,\n  accessToken: null,\n  refreshToken: null\n};\n\nconst quickbooksSlice = createSlice({\n  name: 'quickbooks',\n  initialState: { value: initialStateValue },\n  reducers: {\n    setAuthentication: (state, action: PayloadAction<QuickbooksState>) => {\n      state.value.isAuthenticated = action.payload.isAuthenticated;\n      state.value.accessToken = action.payload.accessToken;\n      state.value.refreshToken = action.payload.refreshToken;\n    },\n      logout: (state) => {\n        state.value = initialStateValue;\n      }\n    },\n  });\n  \n\n\nexport const selectQuickbooksUserId = createSelector(\n  [(state: RootState) => state.user.value.user],\n  (user) => user?.id || ''\n);\n\nexport const { setAuthentication, logout } = quickbooksSlice.actions;\nexport default quickbooksSlice.reducer;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/state/plaid/plaidSlice.tsx\"\n);\nimport.meta.hot.lastModified = \"1703722624791.679\";\n}\n// REMIX HMR END\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\"; // Adjust this import based on your file structure\n\n// Define TypeScript interface for the Quickstart state\ninterface plaid {\n  linkSuccess: boolean;\n  isItemAccess: boolean;\n  isPaymentInitiation: boolean;\n  linkToken: string | null;\n  accessToken: string | null;\n  itemId: string | null;\n  isError: boolean;\n  backend: boolean;\n  products: string[];\n  linkTokenError: {\n    error_message: string;\n    error_code: string;\n    error_type: string;\n  };\n}\n\n// Define the initial state\nconst initialStateValue: plaid = {\n  linkSuccess: false,\n  isItemAccess: true,\n  isPaymentInitiation: false,\n  linkToken: null,\n  accessToken: null,\n  itemId: null,\n  isError: false,\n  backend: true,\n  products: [\"transactions\"],\n  linkTokenError: {\n    error_type: \"\",\n    error_code: \"\",\n    error_message: \"\",\n  },\n};\n\nconst plaidSlice = createSlice({\n  name: \"plaid\",\n  initialState: { value: initialStateValue },\n  reducers: {\n    setState: (state, action: PayloadAction<Partial<plaid>>) => {\n      return { ...state, ...action.payload };\n    },\n    // Reducer to add the link token\n    addLinkToken: (state, action: PayloadAction<string | null>) => {\n      state.value.linkToken = action.payload;\n    },\n    // Reducer to handle link token errors\n    setLinkTokenError: (state, action: PayloadAction<plaid['linkTokenError']>) => {\n      state.value.linkTokenError = action.payload;\n    },\n    setAccessToken: (state, action: PayloadAction<{ itemId: string, accessToken: string, isItemAccess: boolean }>) => {\n      state.value.itemId = action.payload.itemId;\n      state.value.accessToken = action.payload.accessToken;\n      state.value.isItemAccess = action.payload.isItemAccess;\n    },\n    setLinkSuccess: (state, action: PayloadAction<boolean>) => {\n      state.value.linkSuccess = action.payload;\n    },\n  },\n});\n\nexport const { setState, setLinkTokenError, addLinkToken, setAccessToken, setLinkSuccess } = plaidSlice.actions;\nexport default plaidSlice.reducer;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/state/store.ts\"\n);\nimport.meta.hot.lastModified = \"1703885174381.273\";\n}\n// REMIX HMR END\n\n// src/state/store.js\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter/counterSlice\";\nimport userReducer from \"./user/userSlice\";\nimport quickbooksReducer from \"./quickbooks/quickbooksSlice\";\nimport plaidReducer from \"./plaid/plaidSlice\";\n\n// Function to initialize the store\nexport const initializeStore = (preloadedState = {}) => {\n  return configureStore({\n    reducer: {\n      user: userReducer,\n      counter: counterReducer,\n      quickbooks: quickbooksReducer,\n      plaid: plaidReducer,\n    },\n    preloadedState,\n  });\n};\n\nexport type RootState = ReturnType<ReturnType<typeof initializeStore>['getState']>;\nexport type AppDispatch = ReturnType<typeof initializeStore>['dispatch'];\n"],
  "mappings": "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",
  "names": ["initialStateValue"]
}
